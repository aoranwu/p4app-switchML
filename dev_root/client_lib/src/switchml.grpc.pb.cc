// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: switchml.proto

#include "switchml.pb.h"
#include "switchml.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace switchml_proto {

static const char* Session_method_names[] = {
  "/switchml_proto.Session/RdmaSession",
  "/switchml_proto.Session/UdpSession",
};

std::unique_ptr< Session::Stub> Session::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Session::Stub> stub(new Session::Stub(channel));
  return stub;
}

Session::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RdmaSession_(Session_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UdpSession_(Session_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Session::Stub::RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::switchml_proto::RdmaSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RdmaSession_, context, request, response);
}

void Session::Stub::experimental_async::RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RdmaSession_, context, request, response, std::move(f));
}

void Session::Stub::experimental_async::RdmaSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::RdmaSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RdmaSession_, context, request, response, std::move(f));
}

void Session::Stub::experimental_async::RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RdmaSession_, context, request, response, reactor);
}

void Session::Stub::experimental_async::RdmaSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::RdmaSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RdmaSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::switchml_proto::RdmaSessionResponse>* Session::Stub::AsyncRdmaSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::switchml_proto::RdmaSessionResponse>::Create(channel_.get(), cq, rpcmethod_RdmaSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::switchml_proto::RdmaSessionResponse>* Session::Stub::PrepareAsyncRdmaSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::switchml_proto::RdmaSessionResponse>::Create(channel_.get(), cq, rpcmethod_RdmaSession_, context, request, false);
}

::grpc::Status Session::Stub::UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::switchml_proto::UdpSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UdpSession_, context, request, response);
}

void Session::Stub::experimental_async::UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UdpSession_, context, request, response, std::move(f));
}

void Session::Stub::experimental_async::UdpSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::UdpSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UdpSession_, context, request, response, std::move(f));
}

void Session::Stub::experimental_async::UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UdpSession_, context, request, response, reactor);
}

void Session::Stub::experimental_async::UdpSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::UdpSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UdpSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::switchml_proto::UdpSessionResponse>* Session::Stub::AsyncUdpSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::switchml_proto::UdpSessionResponse>::Create(channel_.get(), cq, rpcmethod_UdpSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::switchml_proto::UdpSessionResponse>* Session::Stub::PrepareAsyncUdpSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::switchml_proto::UdpSessionResponse>::Create(channel_.get(), cq, rpcmethod_UdpSession_, context, request, false);
}

Session::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Session_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Session::Service, ::switchml_proto::RdmaSessionRequest, ::switchml_proto::RdmaSessionResponse>(
          [](Session::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::switchml_proto::RdmaSessionRequest* req,
             ::switchml_proto::RdmaSessionResponse* resp) {
               return service->RdmaSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Session_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Session::Service, ::switchml_proto::UdpSessionRequest, ::switchml_proto::UdpSessionResponse>(
          [](Session::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::switchml_proto::UdpSessionRequest* req,
             ::switchml_proto::UdpSessionResponse* resp) {
               return service->UdpSession(ctx, req, resp);
             }, this)));
}

Session::Service::~Service() {
}

::grpc::Status Session::Service::RdmaSession(::grpc::ServerContext* context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Session::Service::UdpSession(::grpc::ServerContext* context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Sync_method_names[] = {
  "/switchml_proto.Sync/Barrier",
  "/switchml_proto.Sync/Broadcast",
};

std::unique_ptr< Sync::Stub> Sync::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Sync::Stub> stub(new Sync::Stub(channel));
  return stub;
}

Sync::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Barrier_(Sync_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Broadcast_(Sync_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Sync::Stub::Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::switchml_proto::BarrierResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Barrier_, context, request, response);
}

void Sync::Stub::experimental_async::Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Barrier_, context, request, response, std::move(f));
}

void Sync::Stub::experimental_async::Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BarrierResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Barrier_, context, request, response, std::move(f));
}

void Sync::Stub::experimental_async::Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Barrier_, context, request, response, reactor);
}

void Sync::Stub::experimental_async::Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Barrier_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::switchml_proto::BarrierResponse>* Sync::Stub::AsyncBarrierRaw(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::switchml_proto::BarrierResponse>::Create(channel_.get(), cq, rpcmethod_Barrier_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::switchml_proto::BarrierResponse>* Sync::Stub::PrepareAsyncBarrierRaw(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::switchml_proto::BarrierResponse>::Create(channel_.get(), cq, rpcmethod_Barrier_, context, request, false);
}

::grpc::Status Sync::Stub::Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::switchml_proto::BroadcastResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Broadcast_, context, request, response);
}

void Sync::Stub::experimental_async::Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, std::move(f));
}

void Sync::Stub::experimental_async::Broadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BroadcastResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, std::move(f));
}

void Sync::Stub::experimental_async::Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, reactor);
}

void Sync::Stub::experimental_async::Broadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BroadcastResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::switchml_proto::BroadcastResponse>* Sync::Stub::AsyncBroadcastRaw(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::switchml_proto::BroadcastResponse>::Create(channel_.get(), cq, rpcmethod_Broadcast_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::switchml_proto::BroadcastResponse>* Sync::Stub::PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::switchml_proto::BroadcastResponse>::Create(channel_.get(), cq, rpcmethod_Broadcast_, context, request, false);
}

Sync::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sync_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sync::Service, ::switchml_proto::BarrierRequest, ::switchml_proto::BarrierResponse>(
          [](Sync::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::switchml_proto::BarrierRequest* req,
             ::switchml_proto::BarrierResponse* resp) {
               return service->Barrier(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sync_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sync::Service, ::switchml_proto::BroadcastRequest, ::switchml_proto::BroadcastResponse>(
          [](Sync::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::switchml_proto::BroadcastRequest* req,
             ::switchml_proto::BroadcastResponse* resp) {
               return service->Broadcast(ctx, req, resp);
             }, this)));
}

Sync::Service::~Service() {
}

::grpc::Status Sync::Service::Barrier(::grpc::ServerContext* context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sync::Service::Broadcast(::grpc::ServerContext* context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace switchml_proto

