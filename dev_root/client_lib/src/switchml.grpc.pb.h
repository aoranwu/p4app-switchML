// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: switchml.proto
// Original file comments:
//
// Copyright 2021 Intel-KAUST-Microsoft
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_switchml_2eproto__INCLUDED
#define GRPC_switchml_2eproto__INCLUDED

#include "switchml.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace switchml_proto {

class Session final {
 public:
  static constexpr char const* service_full_name() {
    return "switchml_proto.Session";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::switchml_proto::RdmaSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::RdmaSessionResponse>> AsyncRdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::RdmaSessionResponse>>(AsyncRdmaSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::RdmaSessionResponse>> PrepareAsyncRdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::RdmaSessionResponse>>(PrepareAsyncRdmaSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::switchml_proto::UdpSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::UdpSessionResponse>> AsyncUdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::UdpSessionResponse>>(AsyncUdpSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::UdpSessionResponse>> PrepareAsyncUdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::UdpSessionResponse>>(PrepareAsyncUdpSessionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RdmaSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::RdmaSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RdmaSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::RdmaSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RdmaSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::RdmaSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UdpSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::UdpSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UdpSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::UdpSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UdpSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::UdpSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::RdmaSessionResponse>* AsyncRdmaSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::RdmaSessionResponse>* PrepareAsyncRdmaSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::UdpSessionResponse>* AsyncUdpSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::UdpSessionResponse>* PrepareAsyncUdpSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::switchml_proto::RdmaSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::RdmaSessionResponse>> AsyncRdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::RdmaSessionResponse>>(AsyncRdmaSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::RdmaSessionResponse>> PrepareAsyncRdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::RdmaSessionResponse>>(PrepareAsyncRdmaSessionRaw(context, request, cq));
    }
    ::grpc::Status UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::switchml_proto::UdpSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::UdpSessionResponse>> AsyncUdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::UdpSessionResponse>>(AsyncUdpSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::UdpSessionResponse>> PrepareAsyncUdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::UdpSessionResponse>>(PrepareAsyncUdpSessionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void RdmaSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::RdmaSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RdmaSession(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RdmaSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::RdmaSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RdmaSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::RdmaSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void UdpSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::UdpSessionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UdpSession(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UdpSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::UdpSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UdpSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::UdpSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::switchml_proto::RdmaSessionResponse>* AsyncRdmaSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::switchml_proto::RdmaSessionResponse>* PrepareAsyncRdmaSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::RdmaSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::switchml_proto::UdpSessionResponse>* AsyncUdpSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::switchml_proto::UdpSessionResponse>* PrepareAsyncUdpSessionRaw(::grpc::ClientContext* context, const ::switchml_proto::UdpSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RdmaSession_;
    const ::grpc::internal::RpcMethod rpcmethod_UdpSession_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RdmaSession(::grpc::ServerContext* context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response);
    virtual ::grpc::Status UdpSession(::grpc::ServerContext* context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RdmaSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::RdmaSessionRequest* /*request*/, ::switchml_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRdmaSession(::grpc::ServerContext* context, ::switchml_proto::RdmaSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::switchml_proto::RdmaSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UdpSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UdpSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UdpSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UdpSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::UdpSessionRequest* /*request*/, ::switchml_proto::UdpSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUdpSession(::grpc::ServerContext* context, ::switchml_proto::UdpSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::switchml_proto::UdpSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RdmaSession<WithAsyncMethod_UdpSession<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RdmaSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::switchml_proto::RdmaSessionRequest, ::switchml_proto::RdmaSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::switchml_proto::RdmaSessionRequest* request, ::switchml_proto::RdmaSessionResponse* response) { return this->RdmaSession(context, request, response); }));}
    void SetMessageAllocatorFor_RdmaSession(
        ::grpc::experimental::MessageAllocator< ::switchml_proto::RdmaSessionRequest, ::switchml_proto::RdmaSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::switchml_proto::RdmaSessionRequest, ::switchml_proto::RdmaSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::RdmaSessionRequest* /*request*/, ::switchml_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RdmaSession(
      ::grpc::CallbackServerContext* /*context*/, const ::switchml_proto::RdmaSessionRequest* /*request*/, ::switchml_proto::RdmaSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RdmaSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::switchml_proto::RdmaSessionRequest* /*request*/, ::switchml_proto::RdmaSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UdpSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UdpSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::switchml_proto::UdpSessionRequest, ::switchml_proto::UdpSessionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::switchml_proto::UdpSessionRequest* request, ::switchml_proto::UdpSessionResponse* response) { return this->UdpSession(context, request, response); }));}
    void SetMessageAllocatorFor_UdpSession(
        ::grpc::experimental::MessageAllocator< ::switchml_proto::UdpSessionRequest, ::switchml_proto::UdpSessionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::switchml_proto::UdpSessionRequest, ::switchml_proto::UdpSessionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UdpSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UdpSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::UdpSessionRequest* /*request*/, ::switchml_proto::UdpSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UdpSession(
      ::grpc::CallbackServerContext* /*context*/, const ::switchml_proto::UdpSessionRequest* /*request*/, ::switchml_proto::UdpSessionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UdpSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::switchml_proto::UdpSessionRequest* /*request*/, ::switchml_proto::UdpSessionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RdmaSession<ExperimentalWithCallbackMethod_UdpSession<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RdmaSession<ExperimentalWithCallbackMethod_UdpSession<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RdmaSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::RdmaSessionRequest* /*request*/, ::switchml_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UdpSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UdpSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UdpSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UdpSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::UdpSessionRequest* /*request*/, ::switchml_proto::UdpSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RdmaSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::RdmaSessionRequest* /*request*/, ::switchml_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRdmaSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UdpSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UdpSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UdpSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UdpSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::UdpSessionRequest* /*request*/, ::switchml_proto::UdpSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUdpSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RdmaSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RdmaSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::RdmaSessionRequest* /*request*/, ::switchml_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RdmaSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RdmaSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UdpSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UdpSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UdpSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UdpSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UdpSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::UdpSessionRequest* /*request*/, ::switchml_proto::UdpSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UdpSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UdpSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RdmaSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RdmaSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::switchml_proto::RdmaSessionRequest, ::switchml_proto::RdmaSessionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::switchml_proto::RdmaSessionRequest, ::switchml_proto::RdmaSessionResponse>* streamer) {
                       return this->StreamedRdmaSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RdmaSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RdmaSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::RdmaSessionRequest* /*request*/, ::switchml_proto::RdmaSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRdmaSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::switchml_proto::RdmaSessionRequest,::switchml_proto::RdmaSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UdpSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UdpSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::switchml_proto::UdpSessionRequest, ::switchml_proto::UdpSessionResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::switchml_proto::UdpSessionRequest, ::switchml_proto::UdpSessionResponse>* streamer) {
                       return this->StreamedUdpSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UdpSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UdpSession(::grpc::ServerContext* /*context*/, const ::switchml_proto::UdpSessionRequest* /*request*/, ::switchml_proto::UdpSessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUdpSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::switchml_proto::UdpSessionRequest,::switchml_proto::UdpSessionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RdmaSession<WithStreamedUnaryMethod_UdpSession<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RdmaSession<WithStreamedUnaryMethod_UdpSession<Service > > StreamedService;
};

class Sync final {
 public:
  static constexpr char const* service_full_name() {
    return "switchml_proto.Sync";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::switchml_proto::BarrierResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BarrierResponse>> AsyncBarrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BarrierResponse>>(AsyncBarrierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BarrierResponse>> PrepareAsyncBarrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BarrierResponse>>(PrepareAsyncBarrierRaw(context, request, cq));
    }
    virtual ::grpc::Status Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::switchml_proto::BroadcastResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BroadcastResponse>> AsyncBroadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BroadcastResponse>>(AsyncBroadcastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BroadcastResponse>> PrepareAsyncBroadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BroadcastResponse>>(PrepareAsyncBroadcastRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BarrierResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BarrierResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Broadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BroadcastResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Broadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Broadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BroadcastResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BarrierResponse>* AsyncBarrierRaw(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BarrierResponse>* PrepareAsyncBarrierRaw(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BroadcastResponse>* AsyncBroadcastRaw(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::switchml_proto::BroadcastResponse>* PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::switchml_proto::BarrierResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::BarrierResponse>> AsyncBarrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::BarrierResponse>>(AsyncBarrierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::BarrierResponse>> PrepareAsyncBarrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::BarrierResponse>>(PrepareAsyncBarrierRaw(context, request, cq));
    }
    ::grpc::Status Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::switchml_proto::BroadcastResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::BroadcastResponse>> AsyncBroadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::BroadcastResponse>>(AsyncBroadcastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::BroadcastResponse>> PrepareAsyncBroadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::switchml_proto::BroadcastResponse>>(PrepareAsyncBroadcastRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response, std::function<void(::grpc::Status)>) override;
      void Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BarrierResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Barrier(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BarrierResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Barrier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BarrierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response, std::function<void(::grpc::Status)>) override;
      void Broadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BroadcastResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Broadcast(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Broadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Broadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::switchml_proto::BroadcastResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::switchml_proto::BarrierResponse>* AsyncBarrierRaw(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::switchml_proto::BarrierResponse>* PrepareAsyncBarrierRaw(::grpc::ClientContext* context, const ::switchml_proto::BarrierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::switchml_proto::BroadcastResponse>* AsyncBroadcastRaw(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::switchml_proto::BroadcastResponse>* PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::switchml_proto::BroadcastRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Barrier_;
    const ::grpc::internal::RpcMethod rpcmethod_Broadcast_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Barrier(::grpc::ServerContext* context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response);
    virtual ::grpc::Status Broadcast(::grpc::ServerContext* context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Barrier() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::switchml_proto::BarrierRequest* /*request*/, ::switchml_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBarrier(::grpc::ServerContext* context, ::switchml_proto::BarrierRequest* request, ::grpc::ServerAsyncResponseWriter< ::switchml_proto::BarrierResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Broadcast() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::switchml_proto::BroadcastRequest* /*request*/, ::switchml_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcast(::grpc::ServerContext* context, ::switchml_proto::BroadcastRequest* request, ::grpc::ServerAsyncResponseWriter< ::switchml_proto::BroadcastResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Barrier<WithAsyncMethod_Broadcast<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Barrier() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::switchml_proto::BarrierRequest, ::switchml_proto::BarrierResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::switchml_proto::BarrierRequest* request, ::switchml_proto::BarrierResponse* response) { return this->Barrier(context, request, response); }));}
    void SetMessageAllocatorFor_Barrier(
        ::grpc::experimental::MessageAllocator< ::switchml_proto::BarrierRequest, ::switchml_proto::BarrierResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::switchml_proto::BarrierRequest, ::switchml_proto::BarrierResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::switchml_proto::BarrierRequest* /*request*/, ::switchml_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Barrier(
      ::grpc::CallbackServerContext* /*context*/, const ::switchml_proto::BarrierRequest* /*request*/, ::switchml_proto::BarrierResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Barrier(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::switchml_proto::BarrierRequest* /*request*/, ::switchml_proto::BarrierResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Broadcast() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::switchml_proto::BroadcastRequest, ::switchml_proto::BroadcastResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::switchml_proto::BroadcastRequest* request, ::switchml_proto::BroadcastResponse* response) { return this->Broadcast(context, request, response); }));}
    void SetMessageAllocatorFor_Broadcast(
        ::grpc::experimental::MessageAllocator< ::switchml_proto::BroadcastRequest, ::switchml_proto::BroadcastResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::switchml_proto::BroadcastRequest, ::switchml_proto::BroadcastResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::switchml_proto::BroadcastRequest* /*request*/, ::switchml_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Broadcast(
      ::grpc::CallbackServerContext* /*context*/, const ::switchml_proto::BroadcastRequest* /*request*/, ::switchml_proto::BroadcastResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Broadcast(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::switchml_proto::BroadcastRequest* /*request*/, ::switchml_proto::BroadcastResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Barrier<ExperimentalWithCallbackMethod_Broadcast<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Barrier<ExperimentalWithCallbackMethod_Broadcast<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Barrier() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::switchml_proto::BarrierRequest* /*request*/, ::switchml_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Broadcast() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::switchml_proto::BroadcastRequest* /*request*/, ::switchml_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Barrier() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::switchml_proto::BarrierRequest* /*request*/, ::switchml_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBarrier(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Broadcast() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::switchml_proto::BroadcastRequest* /*request*/, ::switchml_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcast(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Barrier() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Barrier(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::switchml_proto::BarrierRequest* /*request*/, ::switchml_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Barrier(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Barrier(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Broadcast() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Broadcast(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::switchml_proto::BroadcastRequest* /*request*/, ::switchml_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Broadcast(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Broadcast(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Barrier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Barrier() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::switchml_proto::BarrierRequest, ::switchml_proto::BarrierResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::switchml_proto::BarrierRequest, ::switchml_proto::BarrierResponse>* streamer) {
                       return this->StreamedBarrier(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Barrier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Barrier(::grpc::ServerContext* /*context*/, const ::switchml_proto::BarrierRequest* /*request*/, ::switchml_proto::BarrierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBarrier(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::switchml_proto::BarrierRequest,::switchml_proto::BarrierResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Broadcast() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::switchml_proto::BroadcastRequest, ::switchml_proto::BroadcastResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::switchml_proto::BroadcastRequest, ::switchml_proto::BroadcastResponse>* streamer) {
                       return this->StreamedBroadcast(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::switchml_proto::BroadcastRequest* /*request*/, ::switchml_proto::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadcast(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::switchml_proto::BroadcastRequest,::switchml_proto::BroadcastResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Barrier<WithStreamedUnaryMethod_Broadcast<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Barrier<WithStreamedUnaryMethod_Broadcast<Service > > StreamedService;
};

}  // namespace switchml_proto


#endif  // GRPC_switchml_2eproto__INCLUDED
