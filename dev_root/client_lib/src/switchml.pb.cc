// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: switchml.proto

#include "switchml.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace switchml_proto {
class RdmaSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RdmaSessionRequest> _instance;
} _RdmaSessionRequest_default_instance_;
class RdmaSessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RdmaSessionResponse> _instance;
} _RdmaSessionResponse_default_instance_;
class UdpSessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UdpSessionRequest> _instance;
} _UdpSessionRequest_default_instance_;
class UdpSessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UdpSessionResponse> _instance;
} _UdpSessionResponse_default_instance_;
class BarrierRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BarrierRequest> _instance;
} _BarrierRequest_default_instance_;
class BarrierResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BarrierResponse> _instance;
} _BarrierResponse_default_instance_;
class BroadcastRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastRequest> _instance;
} _BroadcastRequest_default_instance_;
class BroadcastResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastResponse> _instance;
} _BroadcastResponse_default_instance_;
}  // namespace switchml_proto
static void InitDefaultsscc_info_BarrierRequest_switchml_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchml_proto::_BarrierRequest_default_instance_;
    new (ptr) ::switchml_proto::BarrierRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchml_proto::BarrierRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BarrierRequest_switchml_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BarrierRequest_switchml_2eproto}, {}};

static void InitDefaultsscc_info_BarrierResponse_switchml_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchml_proto::_BarrierResponse_default_instance_;
    new (ptr) ::switchml_proto::BarrierResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchml_proto::BarrierResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BarrierResponse_switchml_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BarrierResponse_switchml_2eproto}, {}};

static void InitDefaultsscc_info_BroadcastRequest_switchml_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchml_proto::_BroadcastRequest_default_instance_;
    new (ptr) ::switchml_proto::BroadcastRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchml_proto::BroadcastRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastRequest_switchml_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastRequest_switchml_2eproto}, {}};

static void InitDefaultsscc_info_BroadcastResponse_switchml_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchml_proto::_BroadcastResponse_default_instance_;
    new (ptr) ::switchml_proto::BroadcastResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchml_proto::BroadcastResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastResponse_switchml_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastResponse_switchml_2eproto}, {}};

static void InitDefaultsscc_info_RdmaSessionRequest_switchml_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchml_proto::_RdmaSessionRequest_default_instance_;
    new (ptr) ::switchml_proto::RdmaSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchml_proto::RdmaSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RdmaSessionRequest_switchml_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RdmaSessionRequest_switchml_2eproto}, {}};

static void InitDefaultsscc_info_RdmaSessionResponse_switchml_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchml_proto::_RdmaSessionResponse_default_instance_;
    new (ptr) ::switchml_proto::RdmaSessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchml_proto::RdmaSessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RdmaSessionResponse_switchml_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RdmaSessionResponse_switchml_2eproto}, {}};

static void InitDefaultsscc_info_UdpSessionRequest_switchml_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchml_proto::_UdpSessionRequest_default_instance_;
    new (ptr) ::switchml_proto::UdpSessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchml_proto::UdpSessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UdpSessionRequest_switchml_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UdpSessionRequest_switchml_2eproto}, {}};

static void InitDefaultsscc_info_UdpSessionResponse_switchml_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::switchml_proto::_UdpSessionResponse_default_instance_;
    new (ptr) ::switchml_proto::UdpSessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::switchml_proto::UdpSessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UdpSessionResponse_switchml_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UdpSessionResponse_switchml_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_switchml_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_switchml_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_switchml_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_switchml_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, rank_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, num_workers_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, mac_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, ipv4_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, rkey_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, packet_size_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, message_size_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, qpns_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionRequest, psns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionResponse, session_id_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionResponse, mac_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionResponse, ipv4_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionResponse, rkey_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionResponse, qpns_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::RdmaSessionResponse, psns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionRequest, rank_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionRequest, num_workers_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionRequest, mac_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionRequest, ipv4_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionRequest, packet_size_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionRequest, udp_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionResponse, session_id_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionResponse, mac_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::UdpSessionResponse, ipv4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::BarrierRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::BarrierRequest, num_workers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::BarrierResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::BroadcastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::BroadcastRequest, value_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::BroadcastRequest, rank_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::BroadcastRequest, num_workers_),
  PROTOBUF_FIELD_OFFSET(::switchml_proto::BroadcastRequest, root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::BroadcastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::switchml_proto::BroadcastResponse, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::switchml_proto::RdmaSessionRequest)},
  { 15, -1, sizeof(::switchml_proto::RdmaSessionResponse)},
  { 26, -1, sizeof(::switchml_proto::UdpSessionRequest)},
  { 38, -1, sizeof(::switchml_proto::UdpSessionResponse)},
  { 46, -1, sizeof(::switchml_proto::BarrierRequest)},
  { 52, -1, sizeof(::switchml_proto::BarrierResponse)},
  { 57, -1, sizeof(::switchml_proto::BroadcastRequest)},
  { 66, -1, sizeof(::switchml_proto::BroadcastResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchml_proto::_RdmaSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchml_proto::_RdmaSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchml_proto::_UdpSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchml_proto::_UdpSessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchml_proto::_BarrierRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchml_proto::_BarrierResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchml_proto::_BroadcastRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::switchml_proto::_BroadcastResponse_default_instance_),
};

const char descriptor_table_protodef_switchml_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016switchml.proto\022\016switchml_proto\"\327\001\n\022Rdm"
  "aSessionRequest\022\022\n\nsession_id\030\001 \001(\r\022\014\n\004r"
  "ank\030\002 \001(\r\022\023\n\013num_workers\030\003 \001(\r\022\013\n\003mac\030\004 "
  "\001(\004\022\014\n\004ipv4\030\005 \001(\r\022\014\n\004rkey\030\006 \001(\r\022/\n\013packe"
  "t_size\030\007 \001(\0162\032.switchml_proto.PacketSize"
  "\022\024\n\014message_size\030\010 \001(\r\022\014\n\004qpns\030\t \003(\r\022\014\n\004"
  "psns\030\n \003(\r\"n\n\023RdmaSessionResponse\022\022\n\nses"
  "sion_id\030\001 \001(\004\022\013\n\003mac\030\002 \001(\004\022\014\n\004ipv4\030\003 \001(\r"
  "\022\014\n\004rkey\030\004 \001(\r\022\014\n\004qpns\030\005 \003(\r\022\014\n\004psns\030\006 \003"
  "(\r\"\250\001\n\021UdpSessionRequest\022\022\n\nsession_id\030\001"
  " \001(\004\022\014\n\004rank\030\002 \001(\r\022\023\n\013num_workers\030\003 \001(\r\022"
  "\013\n\003mac\030\004 \001(\004\022\014\n\004ipv4\030\005 \001(\r\022/\n\013packet_siz"
  "e\030\007 \001(\0162\032.switchml_proto.PacketSize\022\020\n\010u"
  "dp_port\030\010 \001(\r\"C\n\022UdpSessionResponse\022\022\n\ns"
  "ession_id\030\001 \001(\004\022\013\n\003mac\030\002 \001(\004\022\014\n\004ipv4\030\003 \001"
  "(\r\"%\n\016BarrierRequest\022\023\n\013num_workers\030\001 \001("
  "\r\"\021\n\017BarrierResponse\"R\n\020BroadcastRequest"
  "\022\r\n\005value\030\001 \001(\004\022\014\n\004rank\030\002 \001(\r\022\023\n\013num_wor"
  "kers\030\003 \001(\r\022\014\n\004root\030\004 \001(\r\"\"\n\021BroadcastRes"
  "ponse\022\r\n\005value\030\001 \001(\004*A\n\nPacketSize\022\013\n\007MT"
  "U_128\020\000\022\013\n\007MTU_256\020\001\022\013\n\007MTU_512\020\002\022\014\n\010MTU"
  "_1024\020\0032\272\001\n\007Session\022X\n\013RdmaSession\022\".swi"
  "tchml_proto.RdmaSessionRequest\032#.switchm"
  "l_proto.RdmaSessionResponse\"\000\022U\n\nUdpSess"
  "ion\022!.switchml_proto.UdpSessionRequest\032\""
  ".switchml_proto.UdpSessionResponse\"\0002\250\001\n"
  "\004Sync\022L\n\007Barrier\022\036.switchml_proto.Barrie"
  "rRequest\032\037.switchml_proto.BarrierRespons"
  "e\"\000\022R\n\tBroadcast\022 .switchml_proto.Broadc"
  "astRequest\032!.switchml_proto.BroadcastRes"
  "ponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_switchml_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_switchml_2eproto_sccs[8] = {
  &scc_info_BarrierRequest_switchml_2eproto.base,
  &scc_info_BarrierResponse_switchml_2eproto.base,
  &scc_info_BroadcastRequest_switchml_2eproto.base,
  &scc_info_BroadcastResponse_switchml_2eproto.base,
  &scc_info_RdmaSessionRequest_switchml_2eproto.base,
  &scc_info_RdmaSessionResponse_switchml_2eproto.base,
  &scc_info_UdpSessionRequest_switchml_2eproto.base,
  &scc_info_UdpSessionResponse_switchml_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_switchml_2eproto_once;
static bool descriptor_table_switchml_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_switchml_2eproto = {
  &descriptor_table_switchml_2eproto_initialized, descriptor_table_protodef_switchml_2eproto, "switchml.proto", 1215,
  &descriptor_table_switchml_2eproto_once, descriptor_table_switchml_2eproto_sccs, descriptor_table_switchml_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_switchml_2eproto::offsets,
  file_level_metadata_switchml_2eproto, 8, file_level_enum_descriptors_switchml_2eproto, file_level_service_descriptors_switchml_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_switchml_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_switchml_2eproto), true);
namespace switchml_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketSize_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_switchml_2eproto);
  return file_level_enum_descriptors_switchml_2eproto[0];
}
bool PacketSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RdmaSessionRequest::InitAsDefaultInstance() {
}
class RdmaSessionRequest::_Internal {
 public:
};

RdmaSessionRequest::RdmaSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchml_proto.RdmaSessionRequest)
}
RdmaSessionRequest::RdmaSessionRequest(const RdmaSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      qpns_(from.qpns_),
      psns_(from.psns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_size_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(message_size_));
  // @@protoc_insertion_point(copy_constructor:switchml_proto.RdmaSessionRequest)
}

void RdmaSessionRequest::SharedCtor() {
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_size_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(message_size_));
}

RdmaSessionRequest::~RdmaSessionRequest() {
  // @@protoc_insertion_point(destructor:switchml_proto.RdmaSessionRequest)
  SharedDtor();
}

void RdmaSessionRequest::SharedDtor() {
}

void RdmaSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RdmaSessionRequest& RdmaSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RdmaSessionRequest_switchml_2eproto.base);
  return *internal_default_instance();
}


void RdmaSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:switchml_proto.RdmaSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qpns_.Clear();
  psns_.Clear();
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_size_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(message_size_));
  _internal_metadata_.Clear();
}

const char* RdmaSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_workers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ipv4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rkey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .switchml_proto.PacketSize packet_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_packet_size(static_cast<::switchml_proto::PacketSize>(val));
        } else goto handle_unusual;
        continue;
      // uint32 message_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          message_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 qpns = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_qpns(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_qpns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 psns = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_psns(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_psns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RdmaSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchml_proto.RdmaSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_session_id(), target);
  }

  // uint32 rank = 2;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank(), target);
  }

  // uint32 num_workers = 3;
  if (this->num_workers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_workers(), target);
  }

  // uint64 mac = 4;
  if (this->mac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_mac(), target);
  }

  // uint32 ipv4 = 5;
  if (this->ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ipv4(), target);
  }

  // uint32 rkey = 6;
  if (this->rkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rkey(), target);
  }

  // .switchml_proto.PacketSize packet_size = 7;
  if (this->packet_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_packet_size(), target);
  }

  // uint32 message_size = 8;
  if (this->message_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_message_size(), target);
  }

  // repeated uint32 qpns = 9;
  {
    int byte_size = _qpns_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_qpns(), byte_size, target);
    }
  }

  // repeated uint32 psns = 10;
  {
    int byte_size = _psns_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_psns(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchml_proto.RdmaSessionRequest)
  return target;
}

size_t RdmaSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchml_proto.RdmaSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 qpns = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->qpns_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _qpns_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 psns = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->psns_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _psns_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_session_id());
  }

  // uint32 rank = 2;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rank());
  }

  // uint64 mac = 4;
  if (this->mac() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mac());
  }

  // uint32 num_workers = 3;
  if (this->num_workers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_workers());
  }

  // uint32 ipv4 = 5;
  if (this->ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ipv4());
  }

  // uint32 rkey = 6;
  if (this->rkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rkey());
  }

  // .switchml_proto.PacketSize packet_size = 7;
  if (this->packet_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packet_size());
  }

  // uint32 message_size = 8;
  if (this->message_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RdmaSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchml_proto.RdmaSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RdmaSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RdmaSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchml_proto.RdmaSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchml_proto.RdmaSessionRequest)
    MergeFrom(*source);
  }
}

void RdmaSessionRequest::MergeFrom(const RdmaSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchml_proto.RdmaSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qpns_.MergeFrom(from.qpns_);
  psns_.MergeFrom(from.psns_);
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.mac() != 0) {
    _internal_set_mac(from._internal_mac());
  }
  if (from.num_workers() != 0) {
    _internal_set_num_workers(from._internal_num_workers());
  }
  if (from.ipv4() != 0) {
    _internal_set_ipv4(from._internal_ipv4());
  }
  if (from.rkey() != 0) {
    _internal_set_rkey(from._internal_rkey());
  }
  if (from.packet_size() != 0) {
    _internal_set_packet_size(from._internal_packet_size());
  }
  if (from.message_size() != 0) {
    _internal_set_message_size(from._internal_message_size());
  }
}

void RdmaSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchml_proto.RdmaSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RdmaSessionRequest::CopyFrom(const RdmaSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchml_proto.RdmaSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RdmaSessionRequest::IsInitialized() const {
  return true;
}

void RdmaSessionRequest::InternalSwap(RdmaSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  qpns_.InternalSwap(&other->qpns_);
  psns_.InternalSwap(&other->psns_);
  swap(session_id_, other->session_id_);
  swap(rank_, other->rank_);
  swap(mac_, other->mac_);
  swap(num_workers_, other->num_workers_);
  swap(ipv4_, other->ipv4_);
  swap(rkey_, other->rkey_);
  swap(packet_size_, other->packet_size_);
  swap(message_size_, other->message_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RdmaSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RdmaSessionResponse::InitAsDefaultInstance() {
}
class RdmaSessionResponse::_Internal {
 public:
};

RdmaSessionResponse::RdmaSessionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchml_proto.RdmaSessionResponse)
}
RdmaSessionResponse::RdmaSessionResponse(const RdmaSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      qpns_(from.qpns_),
      psns_(from.psns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rkey_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(rkey_));
  // @@protoc_insertion_point(copy_constructor:switchml_proto.RdmaSessionResponse)
}

void RdmaSessionResponse::SharedCtor() {
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rkey_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(rkey_));
}

RdmaSessionResponse::~RdmaSessionResponse() {
  // @@protoc_insertion_point(destructor:switchml_proto.RdmaSessionResponse)
  SharedDtor();
}

void RdmaSessionResponse::SharedDtor() {
}

void RdmaSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RdmaSessionResponse& RdmaSessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RdmaSessionResponse_switchml_2eproto.base);
  return *internal_default_instance();
}


void RdmaSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:switchml_proto.RdmaSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qpns_.Clear();
  psns_.Clear();
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rkey_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(rkey_));
  _internal_metadata_.Clear();
}

const char* RdmaSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 mac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ipv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rkey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 qpns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_qpns(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_qpns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 psns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_psns(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_psns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RdmaSessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchml_proto.RdmaSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // uint64 mac = 2;
  if (this->mac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_mac(), target);
  }

  // uint32 ipv4 = 3;
  if (this->ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ipv4(), target);
  }

  // uint32 rkey = 4;
  if (this->rkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rkey(), target);
  }

  // repeated uint32 qpns = 5;
  {
    int byte_size = _qpns_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_qpns(), byte_size, target);
    }
  }

  // repeated uint32 psns = 6;
  {
    int byte_size = _psns_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_psns(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchml_proto.RdmaSessionResponse)
  return target;
}

size_t RdmaSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchml_proto.RdmaSessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 qpns = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->qpns_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _qpns_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 psns = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->psns_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _psns_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // uint64 mac = 2;
  if (this->mac() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mac());
  }

  // uint32 ipv4 = 3;
  if (this->ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ipv4());
  }

  // uint32 rkey = 4;
  if (this->rkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RdmaSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchml_proto.RdmaSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RdmaSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RdmaSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchml_proto.RdmaSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchml_proto.RdmaSessionResponse)
    MergeFrom(*source);
  }
}

void RdmaSessionResponse::MergeFrom(const RdmaSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchml_proto.RdmaSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qpns_.MergeFrom(from.qpns_);
  psns_.MergeFrom(from.psns_);
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.mac() != 0) {
    _internal_set_mac(from._internal_mac());
  }
  if (from.ipv4() != 0) {
    _internal_set_ipv4(from._internal_ipv4());
  }
  if (from.rkey() != 0) {
    _internal_set_rkey(from._internal_rkey());
  }
}

void RdmaSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchml_proto.RdmaSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RdmaSessionResponse::CopyFrom(const RdmaSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchml_proto.RdmaSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RdmaSessionResponse::IsInitialized() const {
  return true;
}

void RdmaSessionResponse::InternalSwap(RdmaSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  qpns_.InternalSwap(&other->qpns_);
  psns_.InternalSwap(&other->psns_);
  swap(session_id_, other->session_id_);
  swap(mac_, other->mac_);
  swap(ipv4_, other->ipv4_);
  swap(rkey_, other->rkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RdmaSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UdpSessionRequest::InitAsDefaultInstance() {
}
class UdpSessionRequest::_Internal {
 public:
};

UdpSessionRequest::UdpSessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchml_proto.UdpSessionRequest)
}
UdpSessionRequest::UdpSessionRequest(const UdpSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&udp_port_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(udp_port_));
  // @@protoc_insertion_point(copy_constructor:switchml_proto.UdpSessionRequest)
}

void UdpSessionRequest::SharedCtor() {
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udp_port_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(udp_port_));
}

UdpSessionRequest::~UdpSessionRequest() {
  // @@protoc_insertion_point(destructor:switchml_proto.UdpSessionRequest)
  SharedDtor();
}

void UdpSessionRequest::SharedDtor() {
}

void UdpSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UdpSessionRequest& UdpSessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UdpSessionRequest_switchml_2eproto.base);
  return *internal_default_instance();
}


void UdpSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:switchml_proto.UdpSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udp_port_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(udp_port_));
  _internal_metadata_.Clear();
}

const char* UdpSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_workers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ipv4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .switchml_proto.PacketSize packet_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_packet_size(static_cast<::switchml_proto::PacketSize>(val));
        } else goto handle_unusual;
        continue;
      // uint32 udp_port = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          udp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UdpSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchml_proto.UdpSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // uint32 rank = 2;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank(), target);
  }

  // uint32 num_workers = 3;
  if (this->num_workers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_workers(), target);
  }

  // uint64 mac = 4;
  if (this->mac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_mac(), target);
  }

  // uint32 ipv4 = 5;
  if (this->ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ipv4(), target);
  }

  // .switchml_proto.PacketSize packet_size = 7;
  if (this->packet_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_packet_size(), target);
  }

  // uint32 udp_port = 8;
  if (this->udp_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_udp_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchml_proto.UdpSessionRequest)
  return target;
}

size_t UdpSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchml_proto.UdpSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // uint32 rank = 2;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rank());
  }

  // uint32 num_workers = 3;
  if (this->num_workers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_workers());
  }

  // uint64 mac = 4;
  if (this->mac() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mac());
  }

  // uint32 ipv4 = 5;
  if (this->ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ipv4());
  }

  // .switchml_proto.PacketSize packet_size = 7;
  if (this->packet_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_packet_size());
  }

  // uint32 udp_port = 8;
  if (this->udp_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_udp_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UdpSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchml_proto.UdpSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UdpSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UdpSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchml_proto.UdpSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchml_proto.UdpSessionRequest)
    MergeFrom(*source);
  }
}

void UdpSessionRequest::MergeFrom(const UdpSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchml_proto.UdpSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.num_workers() != 0) {
    _internal_set_num_workers(from._internal_num_workers());
  }
  if (from.mac() != 0) {
    _internal_set_mac(from._internal_mac());
  }
  if (from.ipv4() != 0) {
    _internal_set_ipv4(from._internal_ipv4());
  }
  if (from.packet_size() != 0) {
    _internal_set_packet_size(from._internal_packet_size());
  }
  if (from.udp_port() != 0) {
    _internal_set_udp_port(from._internal_udp_port());
  }
}

void UdpSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchml_proto.UdpSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdpSessionRequest::CopyFrom(const UdpSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchml_proto.UdpSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpSessionRequest::IsInitialized() const {
  return true;
}

void UdpSessionRequest::InternalSwap(UdpSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
  swap(rank_, other->rank_);
  swap(num_workers_, other->num_workers_);
  swap(mac_, other->mac_);
  swap(ipv4_, other->ipv4_);
  swap(packet_size_, other->packet_size_);
  swap(udp_port_, other->udp_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UdpSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UdpSessionResponse::InitAsDefaultInstance() {
}
class UdpSessionResponse::_Internal {
 public:
};

UdpSessionResponse::UdpSessionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchml_proto.UdpSessionResponse)
}
UdpSessionResponse::UdpSessionResponse(const UdpSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipv4_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(ipv4_));
  // @@protoc_insertion_point(copy_constructor:switchml_proto.UdpSessionResponse)
}

void UdpSessionResponse::SharedCtor() {
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(ipv4_));
}

UdpSessionResponse::~UdpSessionResponse() {
  // @@protoc_insertion_point(destructor:switchml_proto.UdpSessionResponse)
  SharedDtor();
}

void UdpSessionResponse::SharedDtor() {
}

void UdpSessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UdpSessionResponse& UdpSessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UdpSessionResponse_switchml_2eproto.base);
  return *internal_default_instance();
}


void UdpSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:switchml_proto.UdpSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv4_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(ipv4_));
  _internal_metadata_.Clear();
}

const char* UdpSessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 mac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ipv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UdpSessionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchml_proto.UdpSessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // uint64 mac = 2;
  if (this->mac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_mac(), target);
  }

  // uint32 ipv4 = 3;
  if (this->ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ipv4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchml_proto.UdpSessionResponse)
  return target;
}

size_t UdpSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchml_proto.UdpSessionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_session_id());
  }

  // uint64 mac = 2;
  if (this->mac() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mac());
  }

  // uint32 ipv4 = 3;
  if (this->ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ipv4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UdpSessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchml_proto.UdpSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UdpSessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UdpSessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchml_proto.UdpSessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchml_proto.UdpSessionResponse)
    MergeFrom(*source);
  }
}

void UdpSessionResponse::MergeFrom(const UdpSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchml_proto.UdpSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.mac() != 0) {
    _internal_set_mac(from._internal_mac());
  }
  if (from.ipv4() != 0) {
    _internal_set_ipv4(from._internal_ipv4());
  }
}

void UdpSessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchml_proto.UdpSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdpSessionResponse::CopyFrom(const UdpSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchml_proto.UdpSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpSessionResponse::IsInitialized() const {
  return true;
}

void UdpSessionResponse::InternalSwap(UdpSessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
  swap(mac_, other->mac_);
  swap(ipv4_, other->ipv4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UdpSessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BarrierRequest::InitAsDefaultInstance() {
}
class BarrierRequest::_Internal {
 public:
};

BarrierRequest::BarrierRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchml_proto.BarrierRequest)
}
BarrierRequest::BarrierRequest(const BarrierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_workers_ = from.num_workers_;
  // @@protoc_insertion_point(copy_constructor:switchml_proto.BarrierRequest)
}

void BarrierRequest::SharedCtor() {
  num_workers_ = 0u;
}

BarrierRequest::~BarrierRequest() {
  // @@protoc_insertion_point(destructor:switchml_proto.BarrierRequest)
  SharedDtor();
}

void BarrierRequest::SharedDtor() {
}

void BarrierRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BarrierRequest& BarrierRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BarrierRequest_switchml_2eproto.base);
  return *internal_default_instance();
}


void BarrierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:switchml_proto.BarrierRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_workers_ = 0u;
  _internal_metadata_.Clear();
}

const char* BarrierRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_workers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarrierRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchml_proto.BarrierRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_workers = 1;
  if (this->num_workers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_workers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchml_proto.BarrierRequest)
  return target;
}

size_t BarrierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchml_proto.BarrierRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_workers = 1;
  if (this->num_workers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_workers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarrierRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchml_proto.BarrierRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BarrierRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BarrierRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchml_proto.BarrierRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchml_proto.BarrierRequest)
    MergeFrom(*source);
  }
}

void BarrierRequest::MergeFrom(const BarrierRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchml_proto.BarrierRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_workers() != 0) {
    _internal_set_num_workers(from._internal_num_workers());
  }
}

void BarrierRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchml_proto.BarrierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarrierRequest::CopyFrom(const BarrierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchml_proto.BarrierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrierRequest::IsInitialized() const {
  return true;
}

void BarrierRequest::InternalSwap(BarrierRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_workers_, other->num_workers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BarrierRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BarrierResponse::InitAsDefaultInstance() {
}
class BarrierResponse::_Internal {
 public:
};

BarrierResponse::BarrierResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchml_proto.BarrierResponse)
}
BarrierResponse::BarrierResponse(const BarrierResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:switchml_proto.BarrierResponse)
}

void BarrierResponse::SharedCtor() {
}

BarrierResponse::~BarrierResponse() {
  // @@protoc_insertion_point(destructor:switchml_proto.BarrierResponse)
  SharedDtor();
}

void BarrierResponse::SharedDtor() {
}

void BarrierResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BarrierResponse& BarrierResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BarrierResponse_switchml_2eproto.base);
  return *internal_default_instance();
}


void BarrierResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:switchml_proto.BarrierResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* BarrierResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarrierResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchml_proto.BarrierResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchml_proto.BarrierResponse)
  return target;
}

size_t BarrierResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchml_proto.BarrierResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarrierResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchml_proto.BarrierResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BarrierResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BarrierResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchml_proto.BarrierResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchml_proto.BarrierResponse)
    MergeFrom(*source);
  }
}

void BarrierResponse::MergeFrom(const BarrierResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchml_proto.BarrierResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BarrierResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchml_proto.BarrierResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarrierResponse::CopyFrom(const BarrierResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchml_proto.BarrierResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrierResponse::IsInitialized() const {
  return true;
}

void BarrierResponse::InternalSwap(BarrierResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BarrierResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastRequest::InitAsDefaultInstance() {
}
class BroadcastRequest::_Internal {
 public:
};

BroadcastRequest::BroadcastRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchml_proto.BroadcastRequest)
}
BroadcastRequest::BroadcastRequest(const BroadcastRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&root_) -
    reinterpret_cast<char*>(&value_)) + sizeof(root_));
  // @@protoc_insertion_point(copy_constructor:switchml_proto.BroadcastRequest)
}

void BroadcastRequest::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&root_) -
      reinterpret_cast<char*>(&value_)) + sizeof(root_));
}

BroadcastRequest::~BroadcastRequest() {
  // @@protoc_insertion_point(destructor:switchml_proto.BroadcastRequest)
  SharedDtor();
}

void BroadcastRequest::SharedDtor() {
}

void BroadcastRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastRequest& BroadcastRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastRequest_switchml_2eproto.base);
  return *internal_default_instance();
}


void BroadcastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:switchml_proto.BroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&root_) -
      reinterpret_cast<char*>(&value_)) + sizeof(root_));
  _internal_metadata_.Clear();
}

const char* BroadcastRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_workers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchml_proto.BroadcastRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  // uint32 rank = 2;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank(), target);
  }

  // uint32 num_workers = 3;
  if (this->num_workers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_workers(), target);
  }

  // uint32 root = 4;
  if (this->root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchml_proto.BroadcastRequest)
  return target;
}

size_t BroadcastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchml_proto.BroadcastRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  // uint32 rank = 2;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rank());
  }

  // uint32 num_workers = 3;
  if (this->num_workers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_workers());
  }

  // uint32 root = 4;
  if (this->root() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_root());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchml_proto.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchml_proto.BroadcastRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchml_proto.BroadcastRequest)
    MergeFrom(*source);
  }
}

void BroadcastRequest::MergeFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchml_proto.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.num_workers() != 0) {
    _internal_set_num_workers(from._internal_num_workers());
  }
  if (from.root() != 0) {
    _internal_set_root(from._internal_root());
  }
}

void BroadcastRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchml_proto.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRequest::CopyFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchml_proto.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRequest::IsInitialized() const {
  return true;
}

void BroadcastRequest::InternalSwap(BroadcastRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(rank_, other->rank_);
  swap(num_workers_, other->num_workers_);
  swap(root_, other->root_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastResponse::InitAsDefaultInstance() {
}
class BroadcastResponse::_Internal {
 public:
};

BroadcastResponse::BroadcastResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:switchml_proto.BroadcastResponse)
}
BroadcastResponse::BroadcastResponse(const BroadcastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:switchml_proto.BroadcastResponse)
}

void BroadcastResponse::SharedCtor() {
  value_ = PROTOBUF_ULONGLONG(0);
}

BroadcastResponse::~BroadcastResponse() {
  // @@protoc_insertion_point(destructor:switchml_proto.BroadcastResponse)
  SharedDtor();
}

void BroadcastResponse::SharedDtor() {
}

void BroadcastResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastResponse& BroadcastResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastResponse_switchml_2eproto.base);
  return *internal_default_instance();
}


void BroadcastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:switchml_proto.BroadcastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* BroadcastResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:switchml_proto.BroadcastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:switchml_proto.BroadcastResponse)
  return target;
}

size_t BroadcastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:switchml_proto.BroadcastResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:switchml_proto.BroadcastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:switchml_proto.BroadcastResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:switchml_proto.BroadcastResponse)
    MergeFrom(*source);
  }
}

void BroadcastResponse::MergeFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:switchml_proto.BroadcastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void BroadcastResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:switchml_proto.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastResponse::CopyFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:switchml_proto.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastResponse::IsInitialized() const {
  return true;
}

void BroadcastResponse::InternalSwap(BroadcastResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace switchml_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::switchml_proto::RdmaSessionRequest* Arena::CreateMaybeMessage< ::switchml_proto::RdmaSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::switchml_proto::RdmaSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::switchml_proto::RdmaSessionResponse* Arena::CreateMaybeMessage< ::switchml_proto::RdmaSessionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::switchml_proto::RdmaSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::switchml_proto::UdpSessionRequest* Arena::CreateMaybeMessage< ::switchml_proto::UdpSessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::switchml_proto::UdpSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::switchml_proto::UdpSessionResponse* Arena::CreateMaybeMessage< ::switchml_proto::UdpSessionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::switchml_proto::UdpSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::switchml_proto::BarrierRequest* Arena::CreateMaybeMessage< ::switchml_proto::BarrierRequest >(Arena* arena) {
  return Arena::CreateInternal< ::switchml_proto::BarrierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::switchml_proto::BarrierResponse* Arena::CreateMaybeMessage< ::switchml_proto::BarrierResponse >(Arena* arena) {
  return Arena::CreateInternal< ::switchml_proto::BarrierResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::switchml_proto::BroadcastRequest* Arena::CreateMaybeMessage< ::switchml_proto::BroadcastRequest >(Arena* arena) {
  return Arena::CreateInternal< ::switchml_proto::BroadcastRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::switchml_proto::BroadcastResponse* Arena::CreateMaybeMessage< ::switchml_proto::BroadcastResponse >(Arena* arena) {
  return Arena::CreateInternal< ::switchml_proto::BroadcastResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
