// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: switchml.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_switchml_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_switchml_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_switchml_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_switchml_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_switchml_2eproto;
namespace switchml_proto {
class BarrierRequest;
class BarrierRequestDefaultTypeInternal;
extern BarrierRequestDefaultTypeInternal _BarrierRequest_default_instance_;
class BarrierResponse;
class BarrierResponseDefaultTypeInternal;
extern BarrierResponseDefaultTypeInternal _BarrierResponse_default_instance_;
class BroadcastRequest;
class BroadcastRequestDefaultTypeInternal;
extern BroadcastRequestDefaultTypeInternal _BroadcastRequest_default_instance_;
class BroadcastResponse;
class BroadcastResponseDefaultTypeInternal;
extern BroadcastResponseDefaultTypeInternal _BroadcastResponse_default_instance_;
class RdmaSessionRequest;
class RdmaSessionRequestDefaultTypeInternal;
extern RdmaSessionRequestDefaultTypeInternal _RdmaSessionRequest_default_instance_;
class RdmaSessionResponse;
class RdmaSessionResponseDefaultTypeInternal;
extern RdmaSessionResponseDefaultTypeInternal _RdmaSessionResponse_default_instance_;
class UdpSessionRequest;
class UdpSessionRequestDefaultTypeInternal;
extern UdpSessionRequestDefaultTypeInternal _UdpSessionRequest_default_instance_;
class UdpSessionResponse;
class UdpSessionResponseDefaultTypeInternal;
extern UdpSessionResponseDefaultTypeInternal _UdpSessionResponse_default_instance_;
}  // namespace switchml_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::switchml_proto::BarrierRequest* Arena::CreateMaybeMessage<::switchml_proto::BarrierRequest>(Arena*);
template<> ::switchml_proto::BarrierResponse* Arena::CreateMaybeMessage<::switchml_proto::BarrierResponse>(Arena*);
template<> ::switchml_proto::BroadcastRequest* Arena::CreateMaybeMessage<::switchml_proto::BroadcastRequest>(Arena*);
template<> ::switchml_proto::BroadcastResponse* Arena::CreateMaybeMessage<::switchml_proto::BroadcastResponse>(Arena*);
template<> ::switchml_proto::RdmaSessionRequest* Arena::CreateMaybeMessage<::switchml_proto::RdmaSessionRequest>(Arena*);
template<> ::switchml_proto::RdmaSessionResponse* Arena::CreateMaybeMessage<::switchml_proto::RdmaSessionResponse>(Arena*);
template<> ::switchml_proto::UdpSessionRequest* Arena::CreateMaybeMessage<::switchml_proto::UdpSessionRequest>(Arena*);
template<> ::switchml_proto::UdpSessionResponse* Arena::CreateMaybeMessage<::switchml_proto::UdpSessionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace switchml_proto {

enum PacketSize : int {
  MTU_128 = 0,
  MTU_256 = 1,
  MTU_512 = 2,
  MTU_1024 = 3,
  PacketSize_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketSize_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketSize_IsValid(int value);
constexpr PacketSize PacketSize_MIN = MTU_128;
constexpr PacketSize PacketSize_MAX = MTU_1024;
constexpr int PacketSize_ARRAYSIZE = PacketSize_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketSize_descriptor();
template<typename T>
inline const std::string& PacketSize_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketSize>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketSize_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketSize_descriptor(), enum_t_value);
}
inline bool PacketSize_Parse(
    const std::string& name, PacketSize* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketSize>(
    PacketSize_descriptor(), name, value);
}
// ===================================================================

class RdmaSessionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchml_proto.RdmaSessionRequest) */ {
 public:
  RdmaSessionRequest();
  virtual ~RdmaSessionRequest();

  RdmaSessionRequest(const RdmaSessionRequest& from);
  RdmaSessionRequest(RdmaSessionRequest&& from) noexcept
    : RdmaSessionRequest() {
    *this = ::std::move(from);
  }

  inline RdmaSessionRequest& operator=(const RdmaSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RdmaSessionRequest& operator=(RdmaSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RdmaSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RdmaSessionRequest* internal_default_instance() {
    return reinterpret_cast<const RdmaSessionRequest*>(
               &_RdmaSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RdmaSessionRequest& a, RdmaSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RdmaSessionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RdmaSessionRequest* New() const final {
    return CreateMaybeMessage<RdmaSessionRequest>(nullptr);
  }

  RdmaSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RdmaSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RdmaSessionRequest& from);
  void MergeFrom(const RdmaSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RdmaSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchml_proto.RdmaSessionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchml_2eproto);
    return ::descriptor_table_switchml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQpnsFieldNumber = 9,
    kPsnsFieldNumber = 10,
    kSessionIdFieldNumber = 1,
    kRankFieldNumber = 2,
    kMacFieldNumber = 4,
    kNumWorkersFieldNumber = 3,
    kIpv4FieldNumber = 5,
    kRkeyFieldNumber = 6,
    kPacketSizeFieldNumber = 7,
    kMessageSizeFieldNumber = 8,
  };
  // repeated uint32 qpns = 9;
  int qpns_size() const;
  private:
  int _internal_qpns_size() const;
  public:
  void clear_qpns();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qpns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_qpns() const;
  void _internal_add_qpns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_qpns();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 qpns(int index) const;
  void set_qpns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_qpns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      qpns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_qpns();

  // repeated uint32 psns = 10;
  int psns_size() const;
  private:
  int _internal_psns_size() const;
  public:
  void clear_psns();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_psns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_psns() const;
  void _internal_add_psns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_psns();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 psns(int index) const;
  void set_psns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_psns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      psns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_psns();

  // uint32 session_id = 1;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rank = 2;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 mac = 4;
  void clear_mac();
  ::PROTOBUF_NAMESPACE_ID::uint64 mac() const;
  void set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mac() const;
  void _internal_set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 num_workers = 3;
  void clear_num_workers();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_workers() const;
  void set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_workers() const;
  void _internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ipv4 = 5;
  void clear_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4() const;
  void set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ipv4() const;
  void _internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rkey = 6;
  void clear_rkey();
  ::PROTOBUF_NAMESPACE_ID::uint32 rkey() const;
  void set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rkey() const;
  void _internal_set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .switchml_proto.PacketSize packet_size = 7;
  void clear_packet_size();
  ::switchml_proto::PacketSize packet_size() const;
  void set_packet_size(::switchml_proto::PacketSize value);
  private:
  ::switchml_proto::PacketSize _internal_packet_size() const;
  void _internal_set_packet_size(::switchml_proto::PacketSize value);
  public:

  // uint32 message_size = 8;
  void clear_message_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_size() const;
  void set_message_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_size() const;
  void _internal_set_message_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:switchml_proto.RdmaSessionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > qpns_;
  mutable std::atomic<int> _qpns_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > psns_;
  mutable std::atomic<int> _psns_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mac_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_workers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rkey_;
  int packet_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchml_2eproto;
};
// -------------------------------------------------------------------

class RdmaSessionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchml_proto.RdmaSessionResponse) */ {
 public:
  RdmaSessionResponse();
  virtual ~RdmaSessionResponse();

  RdmaSessionResponse(const RdmaSessionResponse& from);
  RdmaSessionResponse(RdmaSessionResponse&& from) noexcept
    : RdmaSessionResponse() {
    *this = ::std::move(from);
  }

  inline RdmaSessionResponse& operator=(const RdmaSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RdmaSessionResponse& operator=(RdmaSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RdmaSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RdmaSessionResponse* internal_default_instance() {
    return reinterpret_cast<const RdmaSessionResponse*>(
               &_RdmaSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RdmaSessionResponse& a, RdmaSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RdmaSessionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RdmaSessionResponse* New() const final {
    return CreateMaybeMessage<RdmaSessionResponse>(nullptr);
  }

  RdmaSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RdmaSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RdmaSessionResponse& from);
  void MergeFrom(const RdmaSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RdmaSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchml_proto.RdmaSessionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchml_2eproto);
    return ::descriptor_table_switchml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQpnsFieldNumber = 5,
    kPsnsFieldNumber = 6,
    kSessionIdFieldNumber = 1,
    kMacFieldNumber = 2,
    kIpv4FieldNumber = 3,
    kRkeyFieldNumber = 4,
  };
  // repeated uint32 qpns = 5;
  int qpns_size() const;
  private:
  int _internal_qpns_size() const;
  public:
  void clear_qpns();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qpns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_qpns() const;
  void _internal_add_qpns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_qpns();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 qpns(int index) const;
  void set_qpns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_qpns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      qpns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_qpns();

  // repeated uint32 psns = 6;
  int psns_size() const;
  private:
  int _internal_psns_size() const;
  public:
  void clear_psns();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_psns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_psns() const;
  void _internal_add_psns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_psns();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 psns(int index) const;
  void set_psns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_psns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      psns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_psns();

  // uint64 session_id = 1;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mac = 2;
  void clear_mac();
  ::PROTOBUF_NAMESPACE_ID::uint64 mac() const;
  void set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mac() const;
  void _internal_set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 ipv4 = 3;
  void clear_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4() const;
  void set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ipv4() const;
  void _internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rkey = 4;
  void clear_rkey();
  ::PROTOBUF_NAMESPACE_ID::uint32 rkey() const;
  void set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rkey() const;
  void _internal_set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:switchml_proto.RdmaSessionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > qpns_;
  mutable std::atomic<int> _qpns_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > psns_;
  mutable std::atomic<int> _psns_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mac_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchml_2eproto;
};
// -------------------------------------------------------------------

class UdpSessionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchml_proto.UdpSessionRequest) */ {
 public:
  UdpSessionRequest();
  virtual ~UdpSessionRequest();

  UdpSessionRequest(const UdpSessionRequest& from);
  UdpSessionRequest(UdpSessionRequest&& from) noexcept
    : UdpSessionRequest() {
    *this = ::std::move(from);
  }

  inline UdpSessionRequest& operator=(const UdpSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UdpSessionRequest& operator=(UdpSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UdpSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UdpSessionRequest* internal_default_instance() {
    return reinterpret_cast<const UdpSessionRequest*>(
               &_UdpSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UdpSessionRequest& a, UdpSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UdpSessionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UdpSessionRequest* New() const final {
    return CreateMaybeMessage<UdpSessionRequest>(nullptr);
  }

  UdpSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UdpSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UdpSessionRequest& from);
  void MergeFrom(const UdpSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UdpSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchml_proto.UdpSessionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchml_2eproto);
    return ::descriptor_table_switchml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kRankFieldNumber = 2,
    kNumWorkersFieldNumber = 3,
    kMacFieldNumber = 4,
    kIpv4FieldNumber = 5,
    kPacketSizeFieldNumber = 7,
    kUdpPortFieldNumber = 8,
  };
  // uint64 session_id = 1;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 rank = 2;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_workers = 3;
  void clear_num_workers();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_workers() const;
  void set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_workers() const;
  void _internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 mac = 4;
  void clear_mac();
  ::PROTOBUF_NAMESPACE_ID::uint64 mac() const;
  void set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mac() const;
  void _internal_set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 ipv4 = 5;
  void clear_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4() const;
  void set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ipv4() const;
  void _internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .switchml_proto.PacketSize packet_size = 7;
  void clear_packet_size();
  ::switchml_proto::PacketSize packet_size() const;
  void set_packet_size(::switchml_proto::PacketSize value);
  private:
  ::switchml_proto::PacketSize _internal_packet_size() const;
  void _internal_set_packet_size(::switchml_proto::PacketSize value);
  public:

  // uint32 udp_port = 8;
  void clear_udp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 udp_port() const;
  void set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_udp_port() const;
  void _internal_set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:switchml_proto.UdpSessionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_workers_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mac_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4_;
  int packet_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 udp_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchml_2eproto;
};
// -------------------------------------------------------------------

class UdpSessionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchml_proto.UdpSessionResponse) */ {
 public:
  UdpSessionResponse();
  virtual ~UdpSessionResponse();

  UdpSessionResponse(const UdpSessionResponse& from);
  UdpSessionResponse(UdpSessionResponse&& from) noexcept
    : UdpSessionResponse() {
    *this = ::std::move(from);
  }

  inline UdpSessionResponse& operator=(const UdpSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UdpSessionResponse& operator=(UdpSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UdpSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UdpSessionResponse* internal_default_instance() {
    return reinterpret_cast<const UdpSessionResponse*>(
               &_UdpSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UdpSessionResponse& a, UdpSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UdpSessionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UdpSessionResponse* New() const final {
    return CreateMaybeMessage<UdpSessionResponse>(nullptr);
  }

  UdpSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UdpSessionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UdpSessionResponse& from);
  void MergeFrom(const UdpSessionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UdpSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchml_proto.UdpSessionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchml_2eproto);
    return ::descriptor_table_switchml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kMacFieldNumber = 2,
    kIpv4FieldNumber = 3,
  };
  // uint64 session_id = 1;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mac = 2;
  void clear_mac();
  ::PROTOBUF_NAMESPACE_ID::uint64 mac() const;
  void set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mac() const;
  void _internal_set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 ipv4 = 3;
  void clear_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4() const;
  void set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ipv4() const;
  void _internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:switchml_proto.UdpSessionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mac_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchml_2eproto;
};
// -------------------------------------------------------------------

class BarrierRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchml_proto.BarrierRequest) */ {
 public:
  BarrierRequest();
  virtual ~BarrierRequest();

  BarrierRequest(const BarrierRequest& from);
  BarrierRequest(BarrierRequest&& from) noexcept
    : BarrierRequest() {
    *this = ::std::move(from);
  }

  inline BarrierRequest& operator=(const BarrierRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarrierRequest& operator=(BarrierRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BarrierRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BarrierRequest* internal_default_instance() {
    return reinterpret_cast<const BarrierRequest*>(
               &_BarrierRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BarrierRequest& a, BarrierRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BarrierRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BarrierRequest* New() const final {
    return CreateMaybeMessage<BarrierRequest>(nullptr);
  }

  BarrierRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BarrierRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BarrierRequest& from);
  void MergeFrom(const BarrierRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BarrierRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchml_proto.BarrierRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchml_2eproto);
    return ::descriptor_table_switchml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumWorkersFieldNumber = 1,
  };
  // uint32 num_workers = 1;
  void clear_num_workers();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_workers() const;
  void set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_workers() const;
  void _internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:switchml_proto.BarrierRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_workers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchml_2eproto;
};
// -------------------------------------------------------------------

class BarrierResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchml_proto.BarrierResponse) */ {
 public:
  BarrierResponse();
  virtual ~BarrierResponse();

  BarrierResponse(const BarrierResponse& from);
  BarrierResponse(BarrierResponse&& from) noexcept
    : BarrierResponse() {
    *this = ::std::move(from);
  }

  inline BarrierResponse& operator=(const BarrierResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarrierResponse& operator=(BarrierResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BarrierResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BarrierResponse* internal_default_instance() {
    return reinterpret_cast<const BarrierResponse*>(
               &_BarrierResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BarrierResponse& a, BarrierResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BarrierResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BarrierResponse* New() const final {
    return CreateMaybeMessage<BarrierResponse>(nullptr);
  }

  BarrierResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BarrierResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BarrierResponse& from);
  void MergeFrom(const BarrierResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BarrierResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchml_proto.BarrierResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchml_2eproto);
    return ::descriptor_table_switchml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:switchml_proto.BarrierResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchml_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchml_proto.BroadcastRequest) */ {
 public:
  BroadcastRequest();
  virtual ~BroadcastRequest();

  BroadcastRequest(const BroadcastRequest& from);
  BroadcastRequest(BroadcastRequest&& from) noexcept
    : BroadcastRequest() {
    *this = ::std::move(from);
  }

  inline BroadcastRequest& operator=(const BroadcastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRequest& operator=(BroadcastRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastRequest*>(
               &_BroadcastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BroadcastRequest& a, BroadcastRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastRequest* New() const final {
    return CreateMaybeMessage<BroadcastRequest>(nullptr);
  }

  BroadcastRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastRequest& from);
  void MergeFrom(const BroadcastRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchml_proto.BroadcastRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchml_2eproto);
    return ::descriptor_table_switchml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kRankFieldNumber = 2,
    kNumWorkersFieldNumber = 3,
    kRootFieldNumber = 4,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 rank = 2;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_workers = 3;
  void clear_num_workers();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_workers() const;
  void set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_workers() const;
  void _internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 root = 4;
  void clear_root();
  ::PROTOBUF_NAMESPACE_ID::uint32 root() const;
  void set_root(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_root() const;
  void _internal_set_root(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:switchml_proto.BroadcastRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_workers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 root_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchml_2eproto;
};
// -------------------------------------------------------------------

class BroadcastResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchml_proto.BroadcastResponse) */ {
 public:
  BroadcastResponse();
  virtual ~BroadcastResponse();

  BroadcastResponse(const BroadcastResponse& from);
  BroadcastResponse(BroadcastResponse&& from) noexcept
    : BroadcastResponse() {
    *this = ::std::move(from);
  }

  inline BroadcastResponse& operator=(const BroadcastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastResponse& operator=(BroadcastResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastResponse* internal_default_instance() {
    return reinterpret_cast<const BroadcastResponse*>(
               &_BroadcastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BroadcastResponse& a, BroadcastResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastResponse* New() const final {
    return CreateMaybeMessage<BroadcastResponse>(nullptr);
  }

  BroadcastResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastResponse& from);
  void MergeFrom(const BroadcastResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchml_proto.BroadcastResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchml_2eproto);
    return ::descriptor_table_switchml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:switchml_proto.BroadcastResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchml_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RdmaSessionRequest

// uint32 session_id = 1;
inline void RdmaSessionRequest::clear_session_id() {
  session_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionRequest.session_id)
  return _internal_session_id();
}
inline void RdmaSessionRequest::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  session_id_ = value;
}
inline void RdmaSessionRequest::set_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionRequest.session_id)
}

// uint32 rank = 2;
inline void RdmaSessionRequest::clear_rank() {
  rank_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::rank() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionRequest.rank)
  return _internal_rank();
}
inline void RdmaSessionRequest::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rank_ = value;
}
inline void RdmaSessionRequest::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionRequest.rank)
}

// uint32 num_workers = 3;
inline void RdmaSessionRequest::clear_num_workers() {
  num_workers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::_internal_num_workers() const {
  return num_workers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::num_workers() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionRequest.num_workers)
  return _internal_num_workers();
}
inline void RdmaSessionRequest::_internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_workers_ = value;
}
inline void RdmaSessionRequest::set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_workers(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionRequest.num_workers)
}

// uint64 mac = 4;
inline void RdmaSessionRequest::clear_mac() {
  mac_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RdmaSessionRequest::_internal_mac() const {
  return mac_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RdmaSessionRequest::mac() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionRequest.mac)
  return _internal_mac();
}
inline void RdmaSessionRequest::_internal_set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mac_ = value;
}
inline void RdmaSessionRequest::set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionRequest.mac)
}

// uint32 ipv4 = 5;
inline void RdmaSessionRequest::clear_ipv4() {
  ipv4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::_internal_ipv4() const {
  return ipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::ipv4() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionRequest.ipv4)
  return _internal_ipv4();
}
inline void RdmaSessionRequest::_internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ipv4_ = value;
}
inline void RdmaSessionRequest::set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionRequest.ipv4)
}

// uint32 rkey = 6;
inline void RdmaSessionRequest::clear_rkey() {
  rkey_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::_internal_rkey() const {
  return rkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::rkey() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionRequest.rkey)
  return _internal_rkey();
}
inline void RdmaSessionRequest::_internal_set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rkey_ = value;
}
inline void RdmaSessionRequest::set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rkey(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionRequest.rkey)
}

// .switchml_proto.PacketSize packet_size = 7;
inline void RdmaSessionRequest::clear_packet_size() {
  packet_size_ = 0;
}
inline ::switchml_proto::PacketSize RdmaSessionRequest::_internal_packet_size() const {
  return static_cast< ::switchml_proto::PacketSize >(packet_size_);
}
inline ::switchml_proto::PacketSize RdmaSessionRequest::packet_size() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionRequest.packet_size)
  return _internal_packet_size();
}
inline void RdmaSessionRequest::_internal_set_packet_size(::switchml_proto::PacketSize value) {
  
  packet_size_ = value;
}
inline void RdmaSessionRequest::set_packet_size(::switchml_proto::PacketSize value) {
  _internal_set_packet_size(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionRequest.packet_size)
}

// uint32 message_size = 8;
inline void RdmaSessionRequest::clear_message_size() {
  message_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::_internal_message_size() const {
  return message_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::message_size() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionRequest.message_size)
  return _internal_message_size();
}
inline void RdmaSessionRequest::_internal_set_message_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  message_size_ = value;
}
inline void RdmaSessionRequest::set_message_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_size(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionRequest.message_size)
}

// repeated uint32 qpns = 9;
inline int RdmaSessionRequest::_internal_qpns_size() const {
  return qpns_.size();
}
inline int RdmaSessionRequest::qpns_size() const {
  return _internal_qpns_size();
}
inline void RdmaSessionRequest::clear_qpns() {
  qpns_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::_internal_qpns(int index) const {
  return qpns_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::qpns(int index) const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionRequest.qpns)
  return _internal_qpns(index);
}
inline void RdmaSessionRequest::set_qpns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  qpns_.Set(index, value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionRequest.qpns)
}
inline void RdmaSessionRequest::_internal_add_qpns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  qpns_.Add(value);
}
inline void RdmaSessionRequest::add_qpns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_qpns(value);
  // @@protoc_insertion_point(field_add:switchml_proto.RdmaSessionRequest.qpns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RdmaSessionRequest::_internal_qpns() const {
  return qpns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RdmaSessionRequest::qpns() const {
  // @@protoc_insertion_point(field_list:switchml_proto.RdmaSessionRequest.qpns)
  return _internal_qpns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RdmaSessionRequest::_internal_mutable_qpns() {
  return &qpns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RdmaSessionRequest::mutable_qpns() {
  // @@protoc_insertion_point(field_mutable_list:switchml_proto.RdmaSessionRequest.qpns)
  return _internal_mutable_qpns();
}

// repeated uint32 psns = 10;
inline int RdmaSessionRequest::_internal_psns_size() const {
  return psns_.size();
}
inline int RdmaSessionRequest::psns_size() const {
  return _internal_psns_size();
}
inline void RdmaSessionRequest::clear_psns() {
  psns_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::_internal_psns(int index) const {
  return psns_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionRequest::psns(int index) const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionRequest.psns)
  return _internal_psns(index);
}
inline void RdmaSessionRequest::set_psns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  psns_.Set(index, value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionRequest.psns)
}
inline void RdmaSessionRequest::_internal_add_psns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  psns_.Add(value);
}
inline void RdmaSessionRequest::add_psns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_psns(value);
  // @@protoc_insertion_point(field_add:switchml_proto.RdmaSessionRequest.psns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RdmaSessionRequest::_internal_psns() const {
  return psns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RdmaSessionRequest::psns() const {
  // @@protoc_insertion_point(field_list:switchml_proto.RdmaSessionRequest.psns)
  return _internal_psns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RdmaSessionRequest::_internal_mutable_psns() {
  return &psns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RdmaSessionRequest::mutable_psns() {
  // @@protoc_insertion_point(field_mutable_list:switchml_proto.RdmaSessionRequest.psns)
  return _internal_mutable_psns();
}

// -------------------------------------------------------------------

// RdmaSessionResponse

// uint64 session_id = 1;
inline void RdmaSessionResponse::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RdmaSessionResponse::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RdmaSessionResponse::session_id() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionResponse.session_id)
  return _internal_session_id();
}
inline void RdmaSessionResponse::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void RdmaSessionResponse::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionResponse.session_id)
}

// uint64 mac = 2;
inline void RdmaSessionResponse::clear_mac() {
  mac_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RdmaSessionResponse::_internal_mac() const {
  return mac_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RdmaSessionResponse::mac() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionResponse.mac)
  return _internal_mac();
}
inline void RdmaSessionResponse::_internal_set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mac_ = value;
}
inline void RdmaSessionResponse::set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionResponse.mac)
}

// uint32 ipv4 = 3;
inline void RdmaSessionResponse::clear_ipv4() {
  ipv4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionResponse::_internal_ipv4() const {
  return ipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionResponse::ipv4() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionResponse.ipv4)
  return _internal_ipv4();
}
inline void RdmaSessionResponse::_internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ipv4_ = value;
}
inline void RdmaSessionResponse::set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionResponse.ipv4)
}

// uint32 rkey = 4;
inline void RdmaSessionResponse::clear_rkey() {
  rkey_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionResponse::_internal_rkey() const {
  return rkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionResponse::rkey() const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionResponse.rkey)
  return _internal_rkey();
}
inline void RdmaSessionResponse::_internal_set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rkey_ = value;
}
inline void RdmaSessionResponse::set_rkey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rkey(value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionResponse.rkey)
}

// repeated uint32 qpns = 5;
inline int RdmaSessionResponse::_internal_qpns_size() const {
  return qpns_.size();
}
inline int RdmaSessionResponse::qpns_size() const {
  return _internal_qpns_size();
}
inline void RdmaSessionResponse::clear_qpns() {
  qpns_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionResponse::_internal_qpns(int index) const {
  return qpns_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionResponse::qpns(int index) const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionResponse.qpns)
  return _internal_qpns(index);
}
inline void RdmaSessionResponse::set_qpns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  qpns_.Set(index, value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionResponse.qpns)
}
inline void RdmaSessionResponse::_internal_add_qpns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  qpns_.Add(value);
}
inline void RdmaSessionResponse::add_qpns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_qpns(value);
  // @@protoc_insertion_point(field_add:switchml_proto.RdmaSessionResponse.qpns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RdmaSessionResponse::_internal_qpns() const {
  return qpns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RdmaSessionResponse::qpns() const {
  // @@protoc_insertion_point(field_list:switchml_proto.RdmaSessionResponse.qpns)
  return _internal_qpns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RdmaSessionResponse::_internal_mutable_qpns() {
  return &qpns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RdmaSessionResponse::mutable_qpns() {
  // @@protoc_insertion_point(field_mutable_list:switchml_proto.RdmaSessionResponse.qpns)
  return _internal_mutable_qpns();
}

// repeated uint32 psns = 6;
inline int RdmaSessionResponse::_internal_psns_size() const {
  return psns_.size();
}
inline int RdmaSessionResponse::psns_size() const {
  return _internal_psns_size();
}
inline void RdmaSessionResponse::clear_psns() {
  psns_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionResponse::_internal_psns(int index) const {
  return psns_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RdmaSessionResponse::psns(int index) const {
  // @@protoc_insertion_point(field_get:switchml_proto.RdmaSessionResponse.psns)
  return _internal_psns(index);
}
inline void RdmaSessionResponse::set_psns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  psns_.Set(index, value);
  // @@protoc_insertion_point(field_set:switchml_proto.RdmaSessionResponse.psns)
}
inline void RdmaSessionResponse::_internal_add_psns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  psns_.Add(value);
}
inline void RdmaSessionResponse::add_psns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_psns(value);
  // @@protoc_insertion_point(field_add:switchml_proto.RdmaSessionResponse.psns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RdmaSessionResponse::_internal_psns() const {
  return psns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RdmaSessionResponse::psns() const {
  // @@protoc_insertion_point(field_list:switchml_proto.RdmaSessionResponse.psns)
  return _internal_psns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RdmaSessionResponse::_internal_mutable_psns() {
  return &psns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RdmaSessionResponse::mutable_psns() {
  // @@protoc_insertion_point(field_mutable_list:switchml_proto.RdmaSessionResponse.psns)
  return _internal_mutable_psns();
}

// -------------------------------------------------------------------

// UdpSessionRequest

// uint64 session_id = 1;
inline void UdpSessionRequest::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UdpSessionRequest::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UdpSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:switchml_proto.UdpSessionRequest.session_id)
  return _internal_session_id();
}
inline void UdpSessionRequest::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void UdpSessionRequest::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:switchml_proto.UdpSessionRequest.session_id)
}

// uint32 rank = 2;
inline void UdpSessionRequest::clear_rank() {
  rank_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UdpSessionRequest::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UdpSessionRequest::rank() const {
  // @@protoc_insertion_point(field_get:switchml_proto.UdpSessionRequest.rank)
  return _internal_rank();
}
inline void UdpSessionRequest::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rank_ = value;
}
inline void UdpSessionRequest::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:switchml_proto.UdpSessionRequest.rank)
}

// uint32 num_workers = 3;
inline void UdpSessionRequest::clear_num_workers() {
  num_workers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UdpSessionRequest::_internal_num_workers() const {
  return num_workers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UdpSessionRequest::num_workers() const {
  // @@protoc_insertion_point(field_get:switchml_proto.UdpSessionRequest.num_workers)
  return _internal_num_workers();
}
inline void UdpSessionRequest::_internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_workers_ = value;
}
inline void UdpSessionRequest::set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_workers(value);
  // @@protoc_insertion_point(field_set:switchml_proto.UdpSessionRequest.num_workers)
}

// uint64 mac = 4;
inline void UdpSessionRequest::clear_mac() {
  mac_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UdpSessionRequest::_internal_mac() const {
  return mac_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UdpSessionRequest::mac() const {
  // @@protoc_insertion_point(field_get:switchml_proto.UdpSessionRequest.mac)
  return _internal_mac();
}
inline void UdpSessionRequest::_internal_set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mac_ = value;
}
inline void UdpSessionRequest::set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:switchml_proto.UdpSessionRequest.mac)
}

// uint32 ipv4 = 5;
inline void UdpSessionRequest::clear_ipv4() {
  ipv4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UdpSessionRequest::_internal_ipv4() const {
  return ipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UdpSessionRequest::ipv4() const {
  // @@protoc_insertion_point(field_get:switchml_proto.UdpSessionRequest.ipv4)
  return _internal_ipv4();
}
inline void UdpSessionRequest::_internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ipv4_ = value;
}
inline void UdpSessionRequest::set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:switchml_proto.UdpSessionRequest.ipv4)
}

// .switchml_proto.PacketSize packet_size = 7;
inline void UdpSessionRequest::clear_packet_size() {
  packet_size_ = 0;
}
inline ::switchml_proto::PacketSize UdpSessionRequest::_internal_packet_size() const {
  return static_cast< ::switchml_proto::PacketSize >(packet_size_);
}
inline ::switchml_proto::PacketSize UdpSessionRequest::packet_size() const {
  // @@protoc_insertion_point(field_get:switchml_proto.UdpSessionRequest.packet_size)
  return _internal_packet_size();
}
inline void UdpSessionRequest::_internal_set_packet_size(::switchml_proto::PacketSize value) {
  
  packet_size_ = value;
}
inline void UdpSessionRequest::set_packet_size(::switchml_proto::PacketSize value) {
  _internal_set_packet_size(value);
  // @@protoc_insertion_point(field_set:switchml_proto.UdpSessionRequest.packet_size)
}

// uint32 udp_port = 8;
inline void UdpSessionRequest::clear_udp_port() {
  udp_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UdpSessionRequest::_internal_udp_port() const {
  return udp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UdpSessionRequest::udp_port() const {
  // @@protoc_insertion_point(field_get:switchml_proto.UdpSessionRequest.udp_port)
  return _internal_udp_port();
}
inline void UdpSessionRequest::_internal_set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  udp_port_ = value;
}
inline void UdpSessionRequest::set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_udp_port(value);
  // @@protoc_insertion_point(field_set:switchml_proto.UdpSessionRequest.udp_port)
}

// -------------------------------------------------------------------

// UdpSessionResponse

// uint64 session_id = 1;
inline void UdpSessionResponse::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UdpSessionResponse::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UdpSessionResponse::session_id() const {
  // @@protoc_insertion_point(field_get:switchml_proto.UdpSessionResponse.session_id)
  return _internal_session_id();
}
inline void UdpSessionResponse::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
}
inline void UdpSessionResponse::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:switchml_proto.UdpSessionResponse.session_id)
}

// uint64 mac = 2;
inline void UdpSessionResponse::clear_mac() {
  mac_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UdpSessionResponse::_internal_mac() const {
  return mac_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UdpSessionResponse::mac() const {
  // @@protoc_insertion_point(field_get:switchml_proto.UdpSessionResponse.mac)
  return _internal_mac();
}
inline void UdpSessionResponse::_internal_set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mac_ = value;
}
inline void UdpSessionResponse::set_mac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:switchml_proto.UdpSessionResponse.mac)
}

// uint32 ipv4 = 3;
inline void UdpSessionResponse::clear_ipv4() {
  ipv4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UdpSessionResponse::_internal_ipv4() const {
  return ipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UdpSessionResponse::ipv4() const {
  // @@protoc_insertion_point(field_get:switchml_proto.UdpSessionResponse.ipv4)
  return _internal_ipv4();
}
inline void UdpSessionResponse::_internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ipv4_ = value;
}
inline void UdpSessionResponse::set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:switchml_proto.UdpSessionResponse.ipv4)
}

// -------------------------------------------------------------------

// BarrierRequest

// uint32 num_workers = 1;
inline void BarrierRequest::clear_num_workers() {
  num_workers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BarrierRequest::_internal_num_workers() const {
  return num_workers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BarrierRequest::num_workers() const {
  // @@protoc_insertion_point(field_get:switchml_proto.BarrierRequest.num_workers)
  return _internal_num_workers();
}
inline void BarrierRequest::_internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_workers_ = value;
}
inline void BarrierRequest::set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_workers(value);
  // @@protoc_insertion_point(field_set:switchml_proto.BarrierRequest.num_workers)
}

// -------------------------------------------------------------------

// BarrierResponse

// -------------------------------------------------------------------

// BroadcastRequest

// uint64 value = 1;
inline void BroadcastRequest::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastRequest::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastRequest::value() const {
  // @@protoc_insertion_point(field_get:switchml_proto.BroadcastRequest.value)
  return _internal_value();
}
inline void BroadcastRequest::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void BroadcastRequest::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:switchml_proto.BroadcastRequest.value)
}

// uint32 rank = 2;
inline void BroadcastRequest::clear_rank() {
  rank_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BroadcastRequest::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BroadcastRequest::rank() const {
  // @@protoc_insertion_point(field_get:switchml_proto.BroadcastRequest.rank)
  return _internal_rank();
}
inline void BroadcastRequest::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rank_ = value;
}
inline void BroadcastRequest::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:switchml_proto.BroadcastRequest.rank)
}

// uint32 num_workers = 3;
inline void BroadcastRequest::clear_num_workers() {
  num_workers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BroadcastRequest::_internal_num_workers() const {
  return num_workers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BroadcastRequest::num_workers() const {
  // @@protoc_insertion_point(field_get:switchml_proto.BroadcastRequest.num_workers)
  return _internal_num_workers();
}
inline void BroadcastRequest::_internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_workers_ = value;
}
inline void BroadcastRequest::set_num_workers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_workers(value);
  // @@protoc_insertion_point(field_set:switchml_proto.BroadcastRequest.num_workers)
}

// uint32 root = 4;
inline void BroadcastRequest::clear_root() {
  root_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BroadcastRequest::_internal_root() const {
  return root_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BroadcastRequest::root() const {
  // @@protoc_insertion_point(field_get:switchml_proto.BroadcastRequest.root)
  return _internal_root();
}
inline void BroadcastRequest::_internal_set_root(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  root_ = value;
}
inline void BroadcastRequest::set_root(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:switchml_proto.BroadcastRequest.root)
}

// -------------------------------------------------------------------

// BroadcastResponse

// uint64 value = 1;
inline void BroadcastResponse::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastResponse::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BroadcastResponse::value() const {
  // @@protoc_insertion_point(field_get:switchml_proto.BroadcastResponse.value)
  return _internal_value();
}
inline void BroadcastResponse::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void BroadcastResponse::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:switchml_proto.BroadcastResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace switchml_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::switchml_proto::PacketSize> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::switchml_proto::PacketSize>() {
  return ::switchml_proto::PacketSize_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_switchml_2eproto
